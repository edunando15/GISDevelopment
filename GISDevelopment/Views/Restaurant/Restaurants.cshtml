@using GISDevelopment.Models.DTOs
@model IEnumerable<GISDevelopment.Models.DTOs.RestaurantDTO>

@{
ViewData["Title"] = "Restaurants";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@latest/ol.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>

<body class="bg-light">
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-md-3">
            <h2 class="text-primary">Restaurants</h2>
            <div class="mb-3">
                <input type="text" id="searchBar" placeholder="Search for a restaurant..." class="form-control" oninput="filterRestaurants()">
            </div>
            <div id="restaurantList" class="list-group">
                @foreach (RestaurantDTO dto in Model)
                {
                <a href="#" class="list-group-item list-group-item-action restaurant-item" data-name="@dto.Name" style="display: none;" onclick="loadPoint(entityTypes.ItalianRestaurant, @dto.Id)">
                    @dto.Name
                </a>
                }
            </div>
        </div>
        <div class="col-md-9">
            <h2 class="text-primary">Restaurants in the Map</h2>
            <div id="map" class="border rounded" style="width: 100%; height: 600px;"></div>
            <div class="mt-3 mb-5">
                <div class="input-group">
                    <label class="input-group-text" for="type">Geometry type:</label>
                    <select class="form-select" id="type">
                        <option value="None">None</option>
                        <option value="Point">Point</option>
                        <option value="LineString">LineString</option>
                        <option value="Polygon">Polygon</option>
                    </select>
                    <button class="btn btn-outline-secondary" id="undo">Undo</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="popupForm" class="position-absolute bg-white p-3 border rounded shadow" style="display: none; z-index: 1000;">
    <h3>Save Feature</h3>
    <div class="mb-2">
        <input type="text" id="featureName" placeholder="Name" class="form-control">
    </div>
    <div class="mb-2">
        <textarea id="featureDescription" placeholder="Description" class="form-control"></textarea>
    </div>
    <div class="d-flex justify-content-end">
        <button onclick="submitFeature()" class="btn btn-primary me-2">Save</button>
        <button onclick="cancelFeature()" class="btn btn-secondary">Cancel</button>
    </div>
</div>
<div id="popup" class="ol-popup position-absolute bg-white border rounded shadow p-2" style="display: none; z-index: 1000;">
    <div id="popup-content"></div>
</div>

<script src="https://cdn.jsdelivr.net/npm/ol@latest/dist/ol.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="js/openLayersFunctions.js"></script>
<script src="js/constants.js"></script>
<script>
    var map = initialiseMap(centralItaly);

    function filterRestaurants() {
        const searchTerm = document.getElementById('searchBar').value.toLowerCase();
        const restaurantItems = document.querySelectorAll('.restaurant-item');

        restaurantItems.forEach(item => {
            if (searchTerm === "") {
                item.style.display = 'none'; // Ensure all rows are hidden when the search bar is cleared
            } else {
                const name = item.getAttribute('data-name').toLowerCase();
                if (name.includes(searchTerm)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            }
        });
    }
    // 1. Create popup overlay
const popupContainer = document.getElementById('popup');
const popupContent = document.getElementById('popup-content');
const popupOverlay = new ol.Overlay({
    element: popupContainer,
    autoPan: true,
    autoPanAnimation: {
        duration: 250,
    }
});
map.addOverlay(popupOverlay);

// 2. Listen for click events
map.on('singleclick', function (evt) {
    const feature = map.forEachFeatureAtPixel(evt.pixel, function (feature) {
        return feature;
    });

    if (feature) {
        const name = feature.get('name') || 'Unnamed';
        const coordinate = evt.coordinate;

        popupContent.innerHTML = `<strong>${name}</strong>`;
        popupOverlay.setPosition(coordinate);
        popupContainer.style.display = 'block';
    } else {
        popupOverlay.setPosition(undefined);
        popupContainer.style.display = 'none';
    }
});

</script>
<script type="module" src="js/drawingFunctions.js"></script>
</body>
</html>