<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@latest/ol.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/ol@latest/dist/ol.js"></script>
    <script src="js/openLayersFunctions.js"></script>
    <script src="js/constants.js"></script>
    <script src="js/mapViewer.js"></script>
</head>
<body class="bg-light">
<div class="container py-5">
    <div class="text-center mb-5">
        <h1 class="display-4">Points of Interest</h1>
        <p class="lead">Explore and interact with points of interest on the map.</p>
    </div>
    <div class="row mb-4">
        <div class="col-md-6">
            <label for="poi-select" class="form-label">Select Category</label>
            <select id="poi-select" class="form-select">
                <option value="Restaurant">Restaurants</option>
                <option value="PlaceOfWorship">Places of Worship</option>
                <option value="Monument">Monuments</option>
                <option value="Shop">Shops</option>
            </select>
        </div>
        <div class="col-md-6 d-flex align-items-end justify-content-end">
            <button id="load-poi" class="btn btn-primary me-2" onclick="loadPointsOfInterest(document.getElementById('poi-select').value)">Load Points</button>
            <button id="remove-poi" class="btn btn-danger me-2" onclick="removePointsOfInterest()">Remove Points</button>
            <button class="btn btn-success" onclick="enablePolygonDraw()">Draw Area</button>
        </div>
    </div>
    <div class="row mb-4">
        <div class="col-md-4">
            <label for="searchInput" class="form-label">Search by Name</label>
            <input type="text" id="searchInput" class="form-control" placeholder="Enter name">
        </div>
        <div class="col-md-4">
            <label for="typeFilter" class="form-label">Filter by Type</label>
            <select id="typeFilter" class="form-select">
                <option value="">All</option>
                <option value="Restaurant">Restaurant</option>
                <option value="PlaceOfWorship">Place of Worship</option>
                <option value="Monument">Monument</option>
                <option value="Shop">Shop</option>
            </select>
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <button class="btn btn-info w-100" onclick="applySearch()">Search & Filter</button>
        </div>
    </div>

    <div id="map" class="border rounded shadow" style="width: 100%; height: 600px;"></div>
    <div id="popup" class="ol-popup card shadow" style="position: absolute; padding: 10px; border-radius: 8px; bottom: 12px; left: -50px;">
        <div id="popup-content" class="card-body"></div>
    </div>
    <div class="mt-5">
        <h3 class="mb-3">Selected Features</h3>
        <ul id="sidebar" class="list-group"></ul>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    let popupOverlay;
    let popupElement;
    let popupContent;
    document.addEventListener("DOMContentLoaded", function () {
        window.map = initialiseMap(centralItaly);

        popupElement = document.getElementById('popup');
        popupContent = document.getElementById('popup-content');

        if (!popupElement || !popupContent) {
            console.error('Popup element or content not found in DOM.');
            return;
        }

        popupOverlay = new ol.Overlay({
            element: popupElement,
            positioning: 'top-center',
            stopEvent: false,
            offset: [0, 10]
        });

        window.popupOverlay = popupOverlay;

        window.map.addOverlay(popupOverlay);

        window.map.on('click', function (event) {
            let foundFeature = false;
            window.map.forEachFeatureAtPixel(event.pixel, function (feature, layer) {
                if (layer === window.poiLayer && feature.getGeometry().getType() === 'Point') {
                    const name = feature.get('name') || 'Unnamed';
                    popupContent.innerHTML = `<strong>${name}</strong>`;
                    popupElement.style.display = 'block';
                    popupOverlay.setPosition(event.coordinate);
                    foundFeature = true;
                }
            });

            if (!foundFeature) {
                popupOverlay.setPosition(undefined);
                popupElement.style.display = 'none';
            }
        });
    });


    let drawInteraction = new source.Vector()
    let drawnLayer = new layer.Vector();
    let drawnPolygon = null;

    function enablePolygonDraw() {
        const sourceVector = new ol.source.Vector({ wrapX: false });

        const vectorLayer = new ol.layer.Vector({
            source: sourceVector,
            style: new ol.style.Style({
                fill: new ol.style.Fill({ color: 'rgba(255, 255, 255, 0.2)' }),
                stroke: new ol.style.Stroke({ color: '#ffcc33', width: 2 })
            })
        });

        vectorLayer.set('name', 'drawn');
        window.drawnLayer = vectorLayer;

        window.map.addLayer(vectorLayer);

        const draw = new ol.interaction.Draw({
            source: sourceVector,
            type: 'Polygon'
        });

        draw.on('drawend', function (event) {
            drawnPolygon = event.feature.getGeometry();
            const result = findEntitiesWithinPolygon(drawnPolygon);
            highlightFeatures(result);
            zoomToSelectedArea(result);
            buildSidebarList(result);
            window.map.removeInteraction(draw);
        });

        window.map.addInteraction(draw);
    }

    function findEntitiesWithinPolygon(polygon) {
        const features = window.poiLayer.getSource().getFeatures();

        return features.filter(f => {
            const geometry = f.getGeometry();
            return polygon.intersectsExtent(geometry.getExtent());
        });
    }

    function highlightFeatures(features) {
        features.forEach(f => {
            f.setStyle(
                new style.Style({
                    image: new style.Circle({
                        radius: 6,
                        fill: new style.Fill({color: 'yellow'}),
                        stroke: new style.Stroke({width: 2, color: 'red'})
                    })
                })
            )
        });
    }

    function zoomToSelectedArea(features) {
        if (!features.length) return;

        let extent = features[0].getGeometry().getExtent().slice();

        for (let i = 1; i < features.length; i++) {
            ol.extent.extend(extent, features[i].getGeometry().getExtent());
        }

        window.map.getView().fit(extent, {
            padding: [40, 40, 40, 40],
            duration: 700
        });
    }

    function buildSidebarList(features) {
        const sidebar = document.getElementById('sidebar');
        sidebar.innerHTML = '';

        const summary = document.createElement('li');
        summary.className = 'list-group-item active';
        summary.textContent = `Total Features: ${features.length}`;
        sidebar.appendChild(summary);
        
        features.forEach(f => {
            const li = document.createElement('li');
            li.className = 'list-group-item';
            li.textContent = f.get('name') || 'Unnamed';
            li.addEventListener('click', () => {
                popupContent.innerHTML = `<strong>${li.textContent}</strong>`;
                popupOverlay.setPosition(f.getGeometry().getCoordinates());
            });
            sidebar.appendChild(li);
        });
    }

    function detectFeatureType(selectedCategory) {
        const tags = {};
        switch (selectedCategory) {
            case 'Restaurant':
                tags['Restaurant'] = 'restaurant';
                break;
            case 'PlaceOfWorship':
                tags['PlaceOfWorship'] = 'crypt, monastery, place_of_worship, grave_yard, Mosque';
                break;
            case 'Monument':
                tags['Monument'] = 'archaeological_site, memorial, milestone, military, monument, obelisk, temple, tomb, ancient path, antica_fontana';
                break;
            case 'Shop':
                tags['Shop'] = 'not null';
                break;
        }
        return tags;
    }
    
    async function applySearch() {
        const name = document.getElementById("searchInput").value.trim();
        const type = document.getElementById("typeFilter").value;

        const tags = {};
        if (type) {
            const typeSpecificTags = detectFeatureType(type);
            Object.assign(tags, typeSpecificTags);
        }
        const response = await fetch("/api/PlanetOsmPoint/Search?name=" + encodeURIComponent(name), {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(tags)
        });

        if (!response.ok) {
            alert("Search failed: " + response.statusText);
            return;
        }

        const featuresData = await response.json();
        console.log("Raw features from API: ", featuresData);
        const geoFormat = new format.GeoJSON({ dataProjection: 'EPSG:3857', featureProjection: 'EPSG:3857' });
        
        const geojsonObject = {
            type: "FeatureCollection",
            features: featuresData.map(obj => {
                if(!obj.geometry || !obj.geometry.type || !obj.geometry.coordinates) {
                    console.warn("Skipping feature due to missing or invalid geometry type or coordinates: ", obj);
                    return null;
                }
                
                return {
                    type: "Feature",
                    geometry: {
                        type: obj.geometry.type,
                        coordinates: obj.geometry.coordinates
                    },
                    properties: {
                        id: obj.id,
                        name: obj.name,
                        tags: obj.tags || {},
                    }
                };
            }).filter(feature => feature !== null)
        };
        console.log('Transformed features (GeoJSON for OL): ', geojsonObject);
        const features = geoFormat.readFeatures(geojsonObject);
        console.log('OpenLayers features: ', features);
        if (!window.poiLayer) {
            window.poiLayer = new layer.Vector({
                source: new source.Vector(),
                style: feature => {
                    const type = feature.getGeometry().getType();
                    let setStyle;
                    if (type === "Point") {
                        setStyle = new style.Style({
                            image: new style.Circle({
                                radius: 6,
                                fill: new style.Fill({ color: 'red' }),
                                stroke: new style.Stroke({ color: '#fff', width: 1 })
                            })
                        });
                    } else if (type === "LineString") {
                        setStyle = new style.Style({
                            stroke: new style.Stroke({ color: 'blue', width: 2 })
                        });
                    } else if (type === "Polygon") {
                        setStyle = new style.Style({
                            stroke: new style.Stroke({ color: 'green', width: 2 }),
                            fill: new style.Fill({ color: 'rgba(0,255,0,0.2)' })
                        });
                    }
                    return setStyle;
                }
            });
            window.map.addLayer(window.poiLayer);
        }

        window.poiLayer.getSource().clear();
        window.poiLayer.getSource().addFeatures(features);

        // Optional: zoom to features
        if (features.length > 0) {
            let extent = null;
            for (let feature of features) {
                const geometry = feature.getGeometry();
                if (geometry) {
                    const featureExtent = geometry.getExtent();
                    if (extent) {
                        ol.extent.extend(extent, featureExtent);
                    } else {
                        extent = ol.extent.clone(featureExtent);
                    }
                }
            }
            if (extent) {
                window.map.getView().fit(extent, { padding: [40, 40, 40, 40], duration: 700 });
            }
            else {
                console.warn('No valid extent found for features.');
            }
        }
    }
</script>
</body>
</html>